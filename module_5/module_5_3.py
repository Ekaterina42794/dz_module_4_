'''Перегрузка операторов"
Цель: применить знания о перегрузке арифметических операторов и операторов сравнения.

Задача "Нужно больше этажей":
Для решения этой задачи будем пользоваться решением к предыдущей задаче "Специальные методы класса".

Необходимо дополнить класс House следующими специальными методами:'''

class House:
    def __init__(self, name, number_of_floors):  # имя и кол-во этажей всего
        self.name = name
        self.number_of_floors = number_of_floors

    def __len__(self):  # - должен возвращать кол-во этажей здания self.number_of_floors.
       return self.number_of_floors

    def __str__(self):  # - должен возвращать строку: "Название: <название>, кол-во этажей: <этажи>".
        return f'"Название: {self.name}, кол-во этажей: {self.number_of_floors}"'

#   Для более точной логики работы методов __eq__, __add__  и других методов сравнения и арифметики
    # перед выполняемыми действиями лучше убедиться в принадлежности к типу при помощи функции isinstance:
    def isinstance(other, int): # - other указывает на объект типа int.
    def isinstance(other, House):   # - other указывает на объект типа House.

    def __eq__(self, other):    # - должен возвращать True, если количество этажей одинаковое у self и у other

# должны присутствовать в классе и возвращать результаты сравнения по соответствующим операторам.
# в сравнении участвует кол-во этажей self.number_of_floors
    # def __lt__(<):  #должны присутствовать в классе и возвращать результаты сравнения по соответствующим операторам
    # def __le__(<=): #должны присутствовать в классе и возвращать результаты сравнения по соответствующим операторам
    # def __gt__(>):  #должны присутствовать в классе и возвращать результаты сравнения по соответствующим операторам
    # def __ge__(>=): #должны присутствовать в классе и возвращать результаты сравнения по соответствующим операторам
    # def __ne__(!=): #должны присутствовать в классе и возвращать результаты сравнения по соответствующим операторам

    def __add__(self, value):   # - увеличивает кол-во этажей на переданное значение value, возвращает сам объект self


#  - работают так же как и __add__ (возвращают результат его вызова)
    def __radd__(self, value):
    def __iadd__(self, value):

#   Остальные методы арифметических операторов, где self - x, other - y:
#   !!! other может быть не только числом, но и вообще любым объектом другого класса.







результаты сравнения по соответствующим операторам.




h1 = House('ЖК Эльбрус', 10)
h2 = House('ЖК Акация', 20)
print()
# __str__
print(h1)
print(h2)

# __len__
print(len(h1))
print(len(h2))

'''Пример результата выполнения программы:
Пример выполняемого кода:'''
print(h1 == h2) # __eq__

h1 = h1 + 10 # __add__
print(h1)
print(h1 == h2)

h1 += 10 # __iadd__
print(h1)

h2 = 10 + h2 # __radd__
print(h2)

print(h1 > h2) # __gt__
print(h1 >= h2) # __ge__
print(h1 < h2) # __lt__
print(h1 <= h2) # __le__
print(h1 != h2) # __ne__

# Вывод на консоль:
# Название: ЖК Эльбрус, кол-во этажей: 10
# Название: ЖК Акация, кол-во этажей: 20
# False
# Название: ЖК Эльбрус, кол-во этажей: 20
# True
# Название: ЖК Эльбрус, кол-во этажей: 30
# Название: ЖК Акация, кол-во этажей: 30
# False
# True
# False
# True
# False
#
# Примечания:
# Методы __iadd__ и __radd__ не обязательно описывать заново, достаточно вернуть значение вызова __add__.
# Более подробно о работе всех перечисленных методов можно прочитать здесь и здесь.
#
# Файл module_5_3.py и загрузите его на ваш GitHub репозиторий. В решении пришлите ссылку на него.